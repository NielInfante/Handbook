[
["index.html", "Doing Bioinformatics at WVU Chapter 1 Introduction", " Doing Bioinformatics at WVU Niel Infante 2019-09-05 Chapter 1 Introduction Welcome to the Wild and Wonderful world of Bioinformatics. Having control of your data, and knowing how to manipulate and mine it, is the only way you can get to what you really want to know. Learning how to access your data, filter it, and combine it with other data will allow you to bring your subject area expertise to bear, and will open up insights into your system. "],
["delete-me.html", "Chapter 2 Delete Me", " Chapter 2 Delete Me You can label chapter and section titles using {#label} after them, e.g., we can reference Chapter 1. If you do not manually label them, there will be automatic labels anyway, e.g., Chapter ??. Figures and tables with captions will be placed in figure and table environments, respectively. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 2.1: Here is a nice figure! Reference a figure by its code chunk label with the fig: prefix, e.g., see Figure 2.1. Similarly, you can reference tables generated from knitr::kable(), e.g., see Table 2.1. knitr::kable( head(iris, 20), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 2.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa 5.4 3.7 1.5 0.2 setosa 4.8 3.4 1.6 0.2 setosa 4.8 3.0 1.4 0.1 setosa 4.3 3.0 1.1 0.1 setosa 5.8 4.0 1.2 0.2 setosa 5.7 4.4 1.5 0.4 setosa 5.4 3.9 1.3 0.4 setosa 5.1 3.5 1.4 0.3 setosa 5.7 3.8 1.7 0.3 setosa 5.1 3.8 1.5 0.3 setosa You can write citations, too. For example, we are using the bookdown package (Xie 2019) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). Bibliography "],
["start.html", "Chapter 3 Getting Started 3.1 Operating Systems 3.2 Text Editor", " Chapter 3 Getting Started Help on picking an operating system and installing basic tools. 3.1 Operating Systems 3.1.1 Windows Though disparaged by most professional Bioinformaticians, you can still do a lot with Windows. Most commercial GUIs run on Windows. Web based applications are generally system agnostic, though many run better in Chrome or Firefox. A Downside to Windows is that it greatly restricts the programs you can run. Almost all Bioinformatics tools are designed on and for the Linux command line. Plus there are numerous command line tools that allow you multiple ways to access your data. On Windows 10, you can actually install Linux as an application. Directions for doing so can be found here. A hugely important tool in Bioinformatics is R. You should install R and R Studio. You can also use Windows to connect to the HPC, or some other Linux server. There are multiple applications for this, a recommended one is MobaXterm. If you are doing work directly on your Windows machine, you should also install git. You can do this either by installing git bash, or by installing MobaXterm and then adding a git plugin. 3.1.2 Mac OS Apple’s operating system is built on top of Linux, so the command line is as easy as opening a terminal. However, the terminal doesn’t support X11 forwarding. This means if you use the terminal to connect to a Linux server like the HPC, you wont be able to see any graphics. To get around this, install XQuartz and use that as your terminal. Its a little harder to visually customize XQuartz, but a guide is here… A hugely important tool in Bioinformatics is R. You should install R and R Studio. 3.1.3 Linux Awesome, you’re pretty much good to go. A hugely important tool in Bioinformatics is R. You should install R and R Studio. 3.1.4 HPC WVU has a High Performance Cluster open to all WVU community members. To use the hpc, you will need an account; information on obtaining an account is here. More information about using the hpc can be found here, or in Chapter @ref(hpc_chapt). 3.2 Text Editor You’re going to need a text editor, for programming, editing metadata files, and occasionally looking at data files. Please note, WORD IS NOT A TEXT EDITOR. Word processors will add a lot of other things to the file besides the plain text. These extra things will choke any other program that tries to read the file. On Windows, also avoid notepad. You can do much better. “What’s the best text editor?” can bring out some strong opinions. The Emacs vs vi religious wars are legendary. Built into most Linux system are Emacs and vi (or vim), and nano. Nano is the simplest, but does the least. The others can do much more, but are confusing for beginners. It is good to know at least a few vi basics, as it will be on any Linux system you encounter. However, unless you really want to go old school hard core, I would suggest a more modern editor. Sublime and Atom are widely used, amazingly powerful, and available on all platforms. Other favorites include Notepad++ (Windows) and BBEdit (Mac). "],
["project.html", "Chapter 4 Project Management", " Chapter 4 Project Management There are many variants on this design, feel free to modify to suit your needs. However, the basic structure of what will be presented will help you in the long run. Each project should have its own directory. Note I will use directory and folder interchangeably. Your project directory should contain a README file, which explains the purpose of the project, and what you have done. Within the directory, there should be multiple sub folders. First is data, where you will store the raw data for the project. The data in this folder should never be written to or modified. I also will have a reference directory, where I will store the reference genome, transcriptome, or other data obtained from external databases. It is good to store this data with the project, so that you can be assured you will always have access to the same version of the data. This may not be practical for large databases (eg blast nr), so take care to note database versions in your scripts. You should have a folder, traditionally called src, which contains all the scripts and source code you write for the project. All external software should be installed in a folder called bin. More on this in Chapter 7. For each analysis you do, or each tool you run, there should be an output directory for it which contains all the output from the analysis. It may be useful to further subdivide each of these folders into more subfolders, with different sorts of data. Also in this top level directory you should have you .git folder. This will be generated when you use git (Chapter 6). Note that all you really want under version control is the README and the src directory. There are no versions for the raw data, and all the derived data should be coming directly from a script. 4.0.1 Directory Setup Name File/Folder Use README.md File An overview of what the project is, and a history of what you’ve done meta File Metadata about the samples reads Folder All the sequence files Data Folder Other data needed for the project, such as reference genomes or annotation files src Folder All the scripts written for the project Tool_1 Folder Output from running tool 1 Tool_2 Folder Output from running tool 2 project.Rproj File If you are doing the project as an R project, this file should be in the base directory Good info here (Wilson et al. 2017) Describe Folder layout, naming conventions, other things from good enough practices. link to that too. Bibliography "],
["container.html", "Chapter 5 Containers 5.1 Example one 5.2 Example two", " Chapter 5 Containers Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],
["git.html", "Chapter 6 Git and GitHub", " Chapter 6 Git and GitHub We have finished a nice book. "],
["software.html", "Chapter 7 Software 7.1 Conda", " Chapter 7 Software Help on how to install and manage tools. 7.1 Conda The easiest and most reproducible way I’ve found to do software installations is using Conda, and its extension BioConda. The BioConda link has a good explaination on how to install, so I’m not going to repeat it. Go there for instructions. The basic steps are to install Miniconda (or Anaconda if you prefer, I recommend Miniconda). Then set up channels. These are repositories of tools you will be able to install. When you want to install a tool, conda will search these repositories, and return the first one it finds with the name you give. It is important to add the bioconda channel last, as this will then be the first repository searched. Conda works by creating envirnoments to work in. By default, once you install conda it creates a base environment which you will be in unless you specify a different one. To install into the base environment you simply name to tool you want: conda install samtools However, tools can have different versions, or clashing dependencies. So you want to create environments. Its very straightforward: conda create -n QC fastqc multiqc This creates an environment called QC. To use the tools you have installed into this environment, you have to activate it: conda activate QC * do the stuff you want to do * conda deactivate For conda, occationally do conda clean --all This will free up some disk space, and remove unused stuff. "],
["version.html", "Chapter 8 Version Tracking", " Chapter 8 Version Tracking Here I am talking about version control of the different tools you use. Talk about Conda. "],
["pipeline.html", "Chapter 9 Pipelines", " Chapter 9 Pipelines Here we present some of the workflows we commonly use. Note that you will have to make some modifications to get them to run on your setup, at the very least changing paths. Also note the date a workflow was last updated. Bioinformatics changes rapidly, and new tools and methods are constantly being developed. RNA-seq September 2018 RNA-seq without a reference September 2018 16S Microbiome September 2018 Variant Finding September 2018 ChIP-seq September 2018 "],
["documentation.html", "Chapter 10 Documentation", " Chapter 10 Documentation "],
["hpc-chapt.html", "Chapter 11 Using the HPC", " Chapter 11 Using the HPC "],
["tools.html", "Chapter 12 Assessing New Tools", " Chapter 12 Assessing New Tools How to determine if you should adopt a new tool. "],
["writting.html", "Chapter 13 Writing About Bioinformatics", " Chapter 13 Writing About Bioinformatics How to write methods sections. "],
["testing.html", "Chapter 14 Testing 14.1 Flowchart", " Chapter 14 Testing This is just an area for me to test out a few things to help create this book. For instance, 14.1 Flowchart Some stuff here. ## Warning: package &#39;DiagrammeR&#39; was built under R version 3.5.2 \\[\\begin{equation} \\sum x_{i} \\end{equation}\\] #```{r, echo=FALSE, engine=&#39;tikz&#39;, out.width=&#39;90%&#39;, fig.ext=if (knitr:::is_latex_output()) &#39;pdf&#39; else &#39;png&#39;, fig.cap=&#39;Some caption.&#39;} \\begin{document} \\begin{tikzpicture}[node distance=2cm] \\node (start) [startstop] {Start}; \\node (in1) [io, below of=start] {Input}; \\node (pro1) [process, below of=in1] {Process 1}; \\node (dec1) [decision, below of=pro1, yshift=-0.5cm] {Decision 1}; \\node (pro2a) [process, below of=dec1, yshift=-0.5cm] {Process 2a text text text text text text text text text text}; \\node (pro2b) [process, right of=dec1, xshift=2cm] {Process 2b}; \\node (out1) [io, below of=pro2a] {Output}; \\node (stop) [startstop, below of=out1] {Stop}; \\draw [arrow] (start) -- (in1); \\draw [arrow] (in1) -- (pro1); \\draw [arrow] (pro1) -- (dec1); \\draw [arrow] (dec1) -- node[anchor=east] {yes} (pro2a); \\draw [arrow] (dec1) -- node[anchor=south] {no} (pro2b); \\draw [arrow] (pro2b) |- (pro1); \\draw [arrow] (pro2a) -- (out1); \\draw [arrow] (out1) -- (stop); \\end{tikzpicture} $$ \\begin{split} \\mathrm{Var}(\\hat{\\beta}) &amp; =\\mathrm{Var}((X&#39;X)^{-1}X&#39;y)\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)((X&#39;X)^{-1}X&#39;)&#39;\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)X(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\sigma^{2}IX(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}\\sigma^{2} \\end{split} $$ \\[\\begin{align} g(X_{n}) &amp;= g(\\theta)+g&#39;({\\tilde{\\theta}})(X_{n}-\\theta) \\notag \\\\ \\sqrt{n}[g(X_{n})-g(\\theta)] &amp;= g&#39;\\left({\\tilde{\\theta}}\\right) \\sqrt{n}[X_{n}-\\theta ] \\tag{14.1} \\end{align}\\] Theorem 14.1 (Pythagorean theorem) For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] "],
["cs-RNA.html", "Chapter 15 A Case Study", " Chapter 15 A Case Study Lets take a simple RNA seq experiment and follow the steps from start to finish. Set up the project folder and repo First, I navigate to my projects folder. Now, since this will be an RNA seq project, I clone the RNA seq template from github: git clone --depth 1 https://github.com/NielInfante/RNAseq.git Case_study_2019_02 This will create the folder Case_study_2019_02, and copy everything from the template repository into it. The depth flag tells git that you only want the latest code, without all the revision history, to save a little space and time. Now go to github and create a repository called Case_study_2019_02, and use the option to create a repo from an existing repository. Do not initialize with a README. Then, using your github ID and the name you want for the project: git remote add origin https://github.com/NielInfante/Case_study_2019_02.git git push -u origin master You now have your project inititalized and connected to a github repository. If the above gives you an error, you can try: rm -rf .git git init git add -A git commit -a -m &#39;Initial Commit&#39; git remote add origin https://github.com/NielInfante/Case_study_2019_02.git git push -u origin master Get the data Should I do this with Agazie data? Project ID 22934923 I will be getting the data from BaseSpace. See 16.1. The project ID is 22934923. This is a Human RNA seq experiment, explaination here Link to paper, if available. Its Human RNA, its old. Check with him, it may be published by now. Use getFastq.R to get data 15.0.1 Create Conda Environment {-csrna_conda} Find the versions that you want. You should install specific versions (generally the latest), and keep track of the version for reproducibility purposes. Copying the conda create command to your readme will record this. conda search fastqc conda search multiqc conda search salmon conda create -n case_study_2019_02 fastqc=0.11.8 multiqc=1.7 salmon=0.12.0 Do QC fastqc and multiqc Quantification Get transcripts, merge them, get IDs conda salmon build index do quantification Differential Expression DESeq2 GO, GSEA, pathway "],
["getting.html", "Chapter 16 Getting Data 16.1 BaseSpace 16.2 GEO 16.3 TCGA 16.4 SRA 16.5 Your collaborator", " Chapter 16 Getting Data There’s lots of data out there, some of it your own. How do you get it somewhere you can compute on it? This chapter will tell. 16.1 BaseSpace If your sequencing was done at WVU or Marshall (or plenty of other places), you will get your data via Illumina’s BaseSpace. For each sequencing run, BaseSpace will produce both a run and a project. The run is primarily for running the machine, and diagnosing technical problems. We are mainly interested in the project. There are many ways to get the data from BaseSpace. If your project is small, you can click through to each sample, and download it manually. This is tedious. You can install the BaseSpace download program, which will allow to download the whole project. I find this slow, and prone to breaking mid downloading. A third method is to use a script and an access token. Instructions for obtaining an access token: Need Help python script R script Explain ownership. 16.2 GEO 16.3 TCGA 16.4 SRA 16.5 Your collaborator 16.5.1 ftp 16.5.2 Globus 16.5.3 Google Drive "],
["sharing.html", "Chapter 17 Sharing Data 17.1 SRA 17.2 GEO 17.3 Google Drive 17.4 figshare 17.5 doi 17.6 Me 17.7 Your collaborator", " Chapter 17 Sharing Data 17.1 SRA 17.2 GEO 17.3 Google Drive 17.4 figshare 17.5 doi 17.6 Me 17.7 Your collaborator "],
["bibliography.html", "Chapter 18 Bibliography", " Chapter 18 Bibliography "]
]
